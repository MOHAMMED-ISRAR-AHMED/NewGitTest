package maps;
import java.util.*;
import java.util.Map.Entry;

public class hashmap {
public static void main(String[] args) {
	HashMap<String,Integer> hp=new HashMap<String,Integer>(); // new generic style
	System.out.println("no insertion order"+"\n");
	hp.put("vishal", 4); 
	hp.put("vaibhav", 2);
    hp.put("sachin", 1); 
    hp.put("akash", 3); 
    hp.put("vaibhav",5); // can have duplicate values
    hp.put("vaibhav",5); // but cant have duplicate key it should be unique
    System.out.println(hp+"\n");

    //Elements can traverse in any order  
    System.out.println("traversing"+"\n");
    for (Entry<String, Integer> e : hp.entrySet()) { 
        System.out.println(e.getKey() + " "+ e.getValue()+"\n"); 
    }
        HashMap<String, Integer> numbers = new HashMap<String,Integer>();
        numbers.put("First", 1);
        numbers.put("Second", 2);
        System.out.println("Original HashMap: " + numbers+"\n");

        // Using merge() Method
        numbers.merge("First", 4, (oldValue, newValue) -> oldValue + newValue);  //supports from jdk 1.8 onwards
        System.out.println("New HashMap of merge(): " + numbers+"\n");

     // Creating a hashmap of even numbers
        HashMap<String, Integer> evenNumbers = new HashMap<>();
        evenNumbers.put("Two", 2);
        evenNumbers.put("Four", 4);
        System.out.println("HashMap1: " + evenNumbers);

        // Creating a hash map from other hashmap
        HashMap<String, Integer> numbers1 = new HashMap<>(evenNumbers);
        numbers1.put("Three", 3);
        System.out.println("HashMap2: " + numbers1);}
}